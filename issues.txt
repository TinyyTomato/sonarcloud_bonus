# extra work：
1. （完成）再测试issues：1）orignal中创建好多个issues 2）改变量名 3）delete  
2. （完成）关注issue_id的变化（issue_id就是key值，一个问题拥有唯一一个issue_id，不同的问题有不同的issue_id），还有issues状态的变化（resolution和status，其区别见下4），还可以看一下issues的changelog有没有收获？


1 Analysis status
Last analysis has warnings
    Your code is analyzed as compatible with all Python 3 versions by default. You can get a more precise analysis by setting the exact Python version in your configuration via the parameter "sonar.python.version"


2 在 SonarCloud 中，"Effort"（工作量）和 "Technical Debt"（技术债务）是与代码质量度量相关的两个重要概念。

Effort（工作量）
"Effort" 衡量了修复代码中的问题所需的工作量。它表示为人日或人时，即解决代码问题所需的实际工作时间。工作量是通过考虑问题的严重性、复杂性和规模等因素来计算的。较大的问题、较复杂的问题或者问题的数量越多，工作量就越大。

Technical Debt（技术债务）
"Technical Debt" 是一种度量，用于表示由于在编写代码时采取的一些权宜之计而产生的负担。这可能包括违反最佳实践、引入代码异味、缺少文档或测试等。Technical Debt 通过测量未来可能的维护成本来量化。

区别：
1. 关注点不同： Effort 关注于当前要解决的问题所需的实际工作时间，而 Technical Debt 关注于代码中的设计和实现上的问题，可能会导致将来的维护成本增加。
2. 计算方法不同： Effort 是一个具体的度量，表示实际的工作量，可以直接与时间相关。Technical Debt 则更加抽象，通常是一个综合指标，考虑到代码的整体质量和可维护性。


3 我在test/test.py中创建了如下内容：
import numpy as np
import pandas as pd

def sonarcloud_test4zzy_bonus(t):  
    a = 5
    b = 10

    if a != b:
        print("True")
    else:
        print("Wrong")


t = 100
sonarcloud_test4zzy_bonus(t)

这个代码中存在code smell，但居然没有被检测出来？？我不知道是为什么（eg：commit 2->3->4）
但是！！在tags标签中会生成新的内容，比如："redundant"、"suspicious"？？这或许是一个可研究的标记


4 resolution和status的区别：
resolution 字段： 表示问题的解决状态，resolution 更关注问题的解决结果。可能的值包括：
1) FIXED: 问题已修复。
2) FALSE-POSITIVE: 问题被标记为误报，不是真正的问题。
3) WONTFIX: 不打算修复此问题。（这个或许是手动标记的，一看就比较得主观）
4) REMOVED: 问题被删除。（这个地方非常奇怪，我测试了，但没有这种情况发生）


status 字段： 表示问题的当前状态，status 更关注问题的当前状态。可能的值包括：
1) OPEN: 问题仍然存在，尚未解决。
2) REOPENED: 问题曾经被解决，但重新打开了。(没遇到过这个情况。。。手动的？？？？？)
3) CLOSED: 问题已解决，并且已关闭。
4) RESOLVED: 问题已解决，但尚未关闭。(没遇到过。。。手动的？？？？？)

例：一个问题可能已经解决 (resolution: FIXED) ，但尚未关闭 (status: OPEN)；
           或者已经解决并关闭 (resolution: FIXED, status: CLOSED)。

注意：这两个字段的变化可以是手动的，也可以是自动的，具体取决于组织或项目的设置以及开发人员的偏好。
在一些情况下，团队可能会选择手动管理问题的解决和状态；
而在其他情况下（eg：默认规则，即没有手动配置任何测试规则），可以通过自动化工具等实现自动的状态变更。

5 在 SonarCloud 中，"component" 是一个通用术语，表示构成软件项目的基本单元，可以是文件、目录、模块或整个项目。
根据属性 qualifier 所确定: FIL == file, TRK == project, DIR == dictionary

6 sonarcloud上可能会存在对该项目历史版本的缓存？所以如果即使我复制了一段没有code smell的代码，将其改成被检测过有code smell的历史版本，也不会自动触发检测？？
  ———— 可能是合理的，但对于代码重构来说，是天灾

7 关于issues的changelog，需要输入issues的key值才能进行查阅，模板如下：
https://sonarcloud.io/api/issues/changelog?projects=TinyyTomato_sonarcloud_bonus&issue=AYylFk8jxkCxZiJZVbD4

可以追踪一个特定的issue的变化情况，不过我不知道到底是不是有用。（这真的有用吗？？？）

8 severity指标已经被抛弃，如下：
Severities are now directly tied to the software quality impacted. This old severity is deprecated and can no longer be modified.
You can now filter issues by Software Quality and the new severities

"现在，严重性（Severities）直接与受影响的软件质量相关联。这种旧的严重性已被弃用，不再可以修改。
您现在可以通过软件质量和新的严重性来筛选问题。"





9 如何确定一个git push对应几个issues？
  1）通过 creationDate 确定 （第一步，for循环给每个creationDate唯一的hash值；第二步，循环搜索相同的hash值以明确哪些是属于一个commit）
  2）to be continued





10 通过下述url返回一个project的analysis的所有结果（注意url里面的analysis是analyses），但这个有用吗？？
我尝试将其和 api/issues/search?project=TinyyTomato_sonarcloud_bonus&analysisId=XXXXXX，但好像返回了全部的结果。
我不确定是否有analysisId这个参数，在web_api里面是没有的，但确实能用....（或者根本没起作用？？）
https://sonarcloud.io/api/project_analyses/search?project=TinyyTomato_sonarcloud_bonus

eg1:
"key": "4fed0828-fc37-4a9a-b2e8-ee3400d2a487",
"date": "2023-12-26T08:34:19+0100",
"events": [], // 空数组，表示在这个分析中没有事件记录。
"projectVersion": "not provided", // 表示项目版本信息未提供。
"manualNewCodePeriodBaseline": false, // 表示在这个分析中没有手动设置新代码期间的基准。
"revision": "9d310e81722e46007ce35d65f1f649bf9d87f007" // git commit_id



eg2:
"key": "AYylFiKuSnmzxAQ8GjiH",
"date": "2023-12-26T08:45:42+0100",
// events中包含一个事件，该事件的类型是 QUALITY_GATE。事件的描述是 "Red"，表示在新代码上的可靠性评级超过1
"events": [
    {
        "key": "AYylFk-XxkCxZiJZVbD5",
        "category": "QUALITY_GATE",
        "name": "Red",
        "description": "Reliability Rating on New Code \u003e 1"
    }
],
"projectVersion": "not provided",
"manualNewCodePeriodBaseline": false,
"revision": "97bef66c62ba432f5e2f3e826e0ade4662a282b9"

11 What is a quality gate?
A Quality Gate is a set of measure-based Boolean conditions. 
It helps you know immediately whether your project is production-ready. 
If your current status is not Passed, 
you'll see which measures caused the problem and the values required to pass.

质量门是一组基于测量的布尔条件。 它可以帮助您立即了解您的项目是否已准备好投入生产。 
如果您当前的状态未通过，您将看到哪些措施导致了问题以及通过所需的值。

12 api/issues/search 中，可能有所效果的参数： 
  1. additionalFields：返回哪些字段（可选），目测没用
  2. createdAt：Datetime to retrieve issues created during a specific analysis
